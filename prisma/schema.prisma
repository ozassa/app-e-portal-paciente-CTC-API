generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  cpf             String    @unique
  nome            String
  email           String    @unique
  telefone        String?
  celular         String?
  dataNascimento  DateTime?
  sexo            String?
  password        String
  avatarUrl       String?

  isActive        Boolean   @default(true)
  emailVerified   Boolean   @default(false)
  phoneVerified   Boolean   @default(false)

  // 2FA
  twoFactorEnabled Boolean  @default(true)
  twoFactorMethod  String?  @default("sms") // sms | whatsapp | email

  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLoginAt     DateTime?

  // Relações
  refreshTokens   RefreshToken[]
  appointments    Appointment[]
  dependents      Dependent[]
  notifications   Notification[]
  activityLogs    ActivityLog[]

  @@map("users")
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model OTPCode {
  id          String   @id @default(uuid())
  cpf         String
  code        String
  type        String   // login | password_reset
  method      String   // sms | whatsapp | email
  expiresAt   DateTime
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([cpf, type])
  @@map("otp_codes")
}

model Appointment {
  id              String   @id @default(uuid())
  userId          String
  tipo            String   // consulta | exame
  especialidade   String
  profissional    String?
  unidade         String
  unidadeId       String?
  dataHora        DateTime
  status          String   @default("agendado") // agendado | confirmado | realizado | cancelado
  observacoes     String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model Unit {
  id          String   @id @default(uuid())
  nome        String
  tipo        String   // clinica | hospital | laboratorio
  endereco    String
  bairro      String?
  cidade      String
  estado      String
  cep         String?
  telefone    String?
  latitude    Float?
  longitude   Float?
  horarios    Json?
  servicos    String[] @default([])
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("units")
}

model Dependent {
  id              String   @id @default(uuid())
  userId          String
  nome            String
  cpf             String   @unique
  dataNascimento  DateTime
  parentesco      String   // filho | conjuge | pai | mae | outro
  isActive        Boolean  @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dependents")
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  titulo      String
  mensagem    String
  tipo        String   // info | warning | success | error
  lida        Boolean  @default(false)
  actionUrl   String?

  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ActivityLog {
  id          String   @id @default(uuid())
  userId      String
  action      String
  entity      String?
  entityId    String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?

  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model DashboardCard {
  id              String   @id @default(uuid())
  userId          String   @unique
  nomeCompleto    String
  cpfMasked       String
  matricula       String
  plano           String
  validade        DateTime
  qrCodeData      String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("dashboard_cards")
}
